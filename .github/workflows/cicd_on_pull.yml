name: CI/CD Pipeline on Pull

on:
  pull_request:
    branches:
      - main

jobs:
  # Job for running all Postman tests
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.11.0'

      - name: Verify Postman collection file exists
        run: |
          ls -l Postman/QOR_Project.postman_collection.json

      - name: Install dependencies
        working-directory: Docker/app
        run: |
          pip install -r requirements.txt

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose via Package Manager
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Temporarily deploy app for testing
      - name: Deploy app for testing
        working-directory: Docker
        run: |
          docker-compose -f docker-compose.yml up -d

        # Node.js packages need to be installed in the root directory
      - name: Install Node.js dependencies
        run: |
          npm install newman@4
          npm install newman-reporter-html  # Install the HTML reporter for Newman
          npm install --legacy-peer-deps

      - name: Run Postman tests with Newman
        run: |
          npx newman run Postman/QOR_Project.postman_collection.json -r cli,html --reporter-html-export Postman/newman_results.html --verbose --bail false

      # Stop and remove temporary test deployment
      - name: Stop test deployment
        working-directory: Docker
        run: |
          docker-compose -f docker-compose.yml down

      - name: Save test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: newman_results
          path: Postman/newman_results.html

  # Merge job, only on pull requests, runs if tests pass
  merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        uses: actions/setup-git@v2

      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge branch into main
        run: |
          git fetch origin
          git checkout main
          git merge --no-ff ${{ github.head_ref }} -m "Automated merge from ${{ github.head_ref }} into main"
          
      - name: Push merge
        run: |
          git push origin main

     
  # Build job, runs only if tests pass
  build:
    runs-on: ubuntu-latest
    needs: merge  # Only run if `merge` job passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        working-directory: Docker
        run: |
          docker build -t qor_project .

  # Deploy job, runs only if build passes
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Only run if `build` job passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose via Package Manager
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Deploy the app
        working-directory: Docker
        run: |
          docker-compose -f docker-compose.yml up -d

  # Notify job, runs after deploy
  notify:
    runs-on: ubuntu-latest
    needs: deploy  # Runs after deploy completes

    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'U07J17B6WLX'
          slack-message: 'Deployment has been successfully completed.'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
